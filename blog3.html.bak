<!doctype html>
<html lang="en">

<head>
    <title>Vanishree ma'am's Website</title>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS v5.2.0-beta1 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css"
        integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@100;300;400;700&display=swap"
        rel="stylesheet">
    <style>
        body {
            font-family: "Times New Roman", Times, serif; 
        }
    </style>
</head>

<body>

<div class="container">

		<div class="row"  >
		<div class="row text-center ">
            <h1>A More Efficient Approach to Zero Knowledge for PLONK</h1>
            <p> November 12, 2020</p>
        </div>
	<div class="row ">
  <div class="col">
    <div class="card w-100 h-100">
      <img src="mina1.png" class="card-img-top"
        alt="" />
      <div class="card-body">
        
		
        <p class="card-text">
		In PLONK (considered as an interactive oracle proof), the prover sends the verifier several polynomials. They are evaluated at some kk points during the course of the protocol. Of course, if we want zero-knowledge, we would require that those evaluations do not reveal anything about the proof’s underlying witness.<br>
		PLONK as described <a href="https://eprint.iacr.org/2019/953">here</a> achieves zero knowledge by multiplying the polynomials with a small degree polynomial of random co-efficients. When PLONK is instantiated with a discrete-log base <a href="https://eprint.iacr.org/2016/263">Bootle et al type</a> polynomial commitment scheme, the polynomial degrees must be padded to the nearest power of two. As a result, since several of the polynomials in PLONK already have degree equal to a power of two before the zero-knowledge masking, the multiplication with a random polynomial pushes the degree to the next power of two, which hurts efficiency. In order to avoid it, we propose an alternative method of achieving zero knowledge.</br>
		</p>
		
		<p class="card-text">
        <h6><span class="fw-bold"> Zero Knowledge for the Column Polynomials</span> </h6>
		Let w be the number of rows in a PLONK constraint system. For a typical real-world circuit, w will not be equal to a power of two.<br>
		Let the witness elements from one column be s<sub>1</sub>, s<sub>2</sub>,...., s<sub>w</sub>
		Let n be the closest power of two to w such that n>=w. 
		Let F be the field that witness elements belong to.
		</br></p>
		
		<p class="card-text">
		Now, in vanilla PLONK, we pad the s<sub>i</sub> with n - w elements, interpolate the polynomial over a domain of size n, scale it by a low degree random polynomial, and commit to the resulting polynomial. We want to avoid increasing the degree with the scaling by a low degree polynomial, so consider the following procedure.
		</p>
		
		<p class="card-text">
		
		<span class="fw-bold">Procedure.</span>Sample k elements uniformly from F: r<sub>w+1</sub>,....., r<sub>w+k</sub> .Append them to the tuple of witness elements and then pad the remaining n - (w+k) places as zeroes. The resulting tuple is interpolated as the witness polynomial. This approach ensures zero knowledge for the witness polynomials as established by Lemma 1.
		<br>
		<img src="blog3_1.png" class="card-img-top"
        alt="" />
		</p>
		
		<p class="card-text">
		<h6><span class="fw-bold"> Zero Knowledge for the Permutation Polynomial</span> </h6>
		The other polynomial in PLONK for which we need zero-knowledge is the “permutation polynomial” z.
The idea here is to set the last kk evaluations to be uniformly random elements t<sub>1</sub>,....., t<sub>k</sub> 
in F. Then, we’ll modify the verification equation to not check for those values to satisfy the permutation property.
<br>
	<img src="blog3_2.png" class="card-img-top"
        alt="" />
	<img src="blog3_3.png" class="card-img-top"
        alt="" /></br><br>
	<img src="blog3_4.png" class="card-img-top"
        alt="" /></br><br>
		
		In the modified permutation polynomial above, the multiple (X-h<sub>n-k</sub>) ....(X-h<sub>n-1</sub>)(X-h<sub>n</sub>)
​ensures that the permutation check is performed only on all the values except the last kk elements in the witness polynomials.
</br>
		
		</p>
		
		</div>
      <div class="card-footer text-center">
        <a href="index.html" class="btn btn-secondary btn-lg btn-block">Visit Website</a>
      </div>
	  
	  
    </div>
  </div>
  </div>
		
</body>
</html>		